Функция Значение(ИмяНастройки, ВызыватьИсключение = Ложь) Экспорт
	
	Возврат ПредопределенныеНастройкиПовтИсп.Значение(ИмяНастройки, ВызыватьИсключение);
	
КонецФункции

Функция РезультатЗначениеИзЗапроса(ИмяНастройки, ВызыватьИсключение) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПредопределенныеНастройки.Параметр КАК Параметр,
	|	ПредопределенныеНастройки.МногострочныйПараметр КАК МногострочныйПараметр,
	|	ПредопределенныеНастройки.СоставнойПараметр КАК СоставнойПараметр,
	|	ПредопределенныеНастройки.Хранилище КАК Хранилище
	|ИЗ
	|	Справочник.ПредопределенныеНастройки КАК ПредопределенныеНастройки
	|ГДЕ
	|	ПредопределенныеНастройки.Ссылка = &Ссылка
	|	И ПредопределенныеНастройки.МногострочныйПараметр = ЛОЖЬ
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ПредопределенныеНастройки.Значение,
	|	ПредопределенныеНастройки.Ссылка.МногострочныйПараметр,
	|	NULL,
	|	NULL
	|ИЗ
	|	Справочник.ПредопределенныеНастройки.Параметры КАК ПредопределенныеНастройки
	|ГДЕ
	|	ПредопределенныеНастройки.Ссылка = &Ссылка
	|	И ПредопределенныеНастройки.Ссылка.МногострочныйПараметр = ИСТИНА";
	

	Ссылка = ПредопределенныеНастройкиПовтИсп.СсылкаПредопределеннойНастройки(ИмяНастройки);

	
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	Попытка
		
		РезультатЗначение = Запрос.Выполнить();
		
	Исключение
		Возврат ПредопределенныеНастройкиПовтИсп.РезультатДляОтсутствующейНастройки(ИмяНастройки, ВызыватьИсключение);
	КонецПопытки;
	
	Возврат РезультатЗначение;
	
КонецФункции

Процедура ЗаполнениеПредопределенныхЭлементов(ТаблицаОписанияПредопределенныхНастроек = Неопределено) Экспорт
	
	Если ТаблицаОписанияПредопределенныхНастроек = Неопределено Тогда 
		ИнициализироватьТаблицуПредопределенныхНастроек(ТаблицаОписанияПредопределенныхНастроек);
	КонецЕсли;
	
	ТаблицаОтсутствующихНастроекВБазе = ОтсутствующиеНастройкиВБазе(ТаблицаОписанияПредопределенныхНастроек);
	
	ОбновитьНастройкиВБазе(ТаблицаОтсутствующихНастроекВБазе);
	
КонецПроцедуры
Процедура обновления настроек в базе данных.
	// Параметры:
	//   ТаблицаНастроекВБазе - таблица значений, содержащая данные для обновления настроек. Обязательный параметр.
	//     Колонки таблицы и их типы данных:
	//       Идентификатор (Тип: УникальныйИдентификатор) - уникальный идентификатор настройки.
	//       ИмяНастройки (Тип: Строка) - имя настройки.
	//       МногострочныйПараметр (Тип: Строка) - значение настройки, представленное в виде многострочной строки.
Процедура ОбновитьНастройкиВБазе(ТаблицаНастроекВБазе) Экспорт
	
	Для Каждого СтрокаНастройки Из ТаблицаНастроекВБазе Цикл
		
		НайденныйЭлемент = Справочники.ПредопределенныеНастройки.ПолучитьСсылку(СтрокаНастройки.Идентификатор);
		
		Если НайденныйЭлемент = Справочники.ПредопределенныеНастройки.ПустаяСсылка() Тогда
			НайденныйЭлемент = Справочники.ПредопределенныеНастройки.НайтиПоРеквизиту("ИмяНастройки", СтрокаНастройки.ИмяНастройки);
		КонецЕсли;
		
		Если НайденныйЭлемент <> Справочники.ПредопределенныеНастройки.ПустаяСсылка() Тогда
			Элемент = НайденныйЭлемент.ПолучитьОбъект();
			Элемент.УстановитьСсылкуНового(НайденныйЭлемент);
		Иначе
			Элемент = Справочники.ПредопределенныеНастройки.СоздатьЭлемент();
		КонецЕсли;
		
		Элемент.ИмяНастройки = СтрокаНастройки.ИмяНастройки;
		Элемент.МногострочныйПараметр = СтрокаНастройки.МногострочныйПараметр;
		Элемент.Записать();
		
	КонецЦикла;

КонецПроцедуры

Функция ОтсутствующиеНастройкиВБазе(ТаблицаОписанияПредопределенныхНастроек) Экспорт
	
	ТаблицаНовыхНастроек = ТаблицаПредопределенныхНастроек();
	
	Для Каждого СтрокаНастройки Из ТаблицаОписанияПредопределенныхНастроек Цикл
		
        Элемент = Справочники.ПредопределенныеНастройки.ПолучитьСсылку(СтрокаНастройки.Идентификатор);
        Если Не БазоваяФункциональность.СсылкаСуществует(Элемент) Тогда
        	Элемент = Справочники.ПредопределенныеНастройки.НайтиПоРеквизиту("ИмяНастройки", СтрокаНастройки.ИмяНастройки);
        КонецЕсли;

        Если ЗначениеЗаполнено(Элемент) = Ложь Тогда
        	НоваяНастройка = ТаблицаНовыхНастроек.Добавить();
        	ЗаполнитьЗначенияСвойств(НоваяНастройка, СтрокаНастройки);
        КонецЕсли;
        
	КонецЦикла;
	 
	Возврат ТаблицаНовыхНастроек;
	
КонецФункции


Процедура ИнициализироватьТаблицуПредопределенныхНастроек(ТаблицаОписанияПредопределенныхНастроек) Экспорт
	
	ТаблицаОписанияПредопределенныхНастроек = ТаблицаПредопределенныхНастроек();
	ЗаполнитьТаблицуПредопределенныхНастроек(ТаблицаОписанияПредопределенныхНастроек);
	ПредопределенныеНастройкиПереопределяемый.ПриЗаполненииТаблицыПредопределенныхНастроек(ТаблицаОписанияПредопределенныхНастроек);
	
КонецПроцедуры

Процедура ЗаполнитьТаблицуПредопределенныхНастроек(ТаблицаОписанияПредопределенныхНастроек) Экспорт

	
КонецПроцедуры

// Функция возвращает таблицу значений с предопределенными настройками.
// Таблица содержит следующие колонки:
//   - Идентификатор: Строка - уникальный идентификатор настройки.
//   - ИмяНастройки: Строка - наименование настройки.
//   - МногострочныйПараметр: Булево - признак многострочности параметра.
//   - ЗначенияПараметров: Массив - массив возможных значений параметра.
//
// Возвращаемое значение:
// ТаблицаЗначений - таблица со следующими колонками:
// - Идентификатор (УникальныйИдентификатор) - уникальный идентификатор настройки.
// - ИмяНастройки (Строка) - имя настройки.
// - МногострочныйПараметр (Булево) - флаг, указывающий, является ли параметр многострочным.
// - ЗначенияПараметров (Массив) - массив значений параметра настройки.

Функция ТаблицаПредопределенныхНастроек() Экспорт

    ТаблицаНастроек = Новый ТаблицаЗначений;
    ТаблицаНастроек.Колонки.Добавить("Идентификатор", Новый ОписаниеТипов("УникальныйИдентификатор"));
    ТаблицаНастроек.Колонки.Добавить("ИмяНастройки", Новый ОписаниеТипов("Строка"));
    ТаблицаНастроек.Колонки.Добавить("МногострочныйПараметр", Новый ОписаниеТипов("Булево"));
    ТаблицаНастроек.Колонки.Добавить("ЗначенияПараметров", Новый ОписаниеТипов("Массив"));
	
	Возврат ТаблицаНастроек;
	
КонецФункции