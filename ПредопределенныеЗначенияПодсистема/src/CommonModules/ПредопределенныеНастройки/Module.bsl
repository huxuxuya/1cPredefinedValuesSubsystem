#Область ПрограммныйИнтерфейс

Функция Значение(ИмяНастройки, ВызыватьИсключение = Ложь) Экспорт
	
	Возврат ПредопределенныеНастройкиПовтИсп.Значение(ИмяНастройки, ВызыватьИсключение);
	
КонецФункции

// Возвращает ссылку на предопределенную настройку по имени.
// 

// 	ИмяНастройки - Строка - Имя настройки
// 	
// Возвращаемое значение:
// 	СправочникСсылка.ПредопределенныеНастройки - Ссылка на предопределенную настройку
// 	
Функция НастройкаПоИмени(ИмяНастройки) Экспорт
	
	Возврат ПредопределенныеНастройкиПовтИсп.СсылкаПредопределеннойНастройки(ИмяНастройки);
	
КонецФункции

Функция ЗначениеПредопределеннойНастройки(ИмяНастройки, ВызыватьИсключение) Экспорт
	

	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ПредопределенныеНастройки.Значение КАК Значение
		|ИЗ
		|	Справочник.ПредопределенныеНастройки КАК ПредопределенныеНастройки
		|ГДЕ
		|	ПредопределенныеНастройки.Ссылка = &Ссылка
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ПредопределенныеНастройки.Хранилище
		|ИЗ
		|	Справочник.ПредопределенныеНастройки КАК ПредопределенныеНастройки
		|ГДЕ
		|	ПредопределенныеНастройки.Ссылка = &Ссылка
		|	И ПредопределенныеНастройки.ТипЗначения = ЗНАЧЕНИЕ(Перечисление.ТипыЗначенияПредопределенныхЗначений.Массив)";
	
	Запрос.УстановитьПараметр("Ссылка", ПредопределенныеНастройкиПовтИсп.СсылкаПредопределеннойНастройки(ИмяНастройки));
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат ПредопределенныеНастройкиПовтИсп.РезультатДляОтсутствующейНастройки(ИмяНастройки, ВызыватьИсключение);
	КонецЕсли;
		
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Возврат ВыборкаДетальныеЗаписи.Значение;
	КонецЦикла;
	
КонецФункции

Процедура ЗаполнениеПредопределенныхЭлементов(ТаблицаОписанияПредопределенныхНастроек = Неопределено) Экспорт
	
	Если ТаблицаОписанияПредопределенныхНастроек = Неопределено Тогда 
		ИнициализироватьТаблицуПредопределенныхНастроек(ТаблицаОписанияПредопределенныхНастроек);
	КонецЕсли;
	
	ТаблицаОтсутствующихНастроекВБазе = ОтсутствующиеНастройкиВБазе(ТаблицаОписанияПредопределенныхНастроек);
	
	ОбновитьНастройкиВБазе(ТаблицаОтсутствующихНастроекВБазе);
	
КонецПроцедуры

// Процедура обновления настроек в базе данных.
// Параметры:
//   ТаблицаНастроекВБазе - ТаблицаЗначений - содержащая данные для обновления настроек. Обязательный параметр.
//		Идентификатор: Строка - уникальный идентификатор настройки.
//		ИмяНастройки: Строка - наименование настройки.
//		Хранилище: ValueStorage - хранилище значений.
//		Наименование: Строка - содержание настройки.
//		Описание - Строка - описание настройки.
//		ТипЗначения: Перечисление.ТипыЗначенияПредопределенныхЗначений - ссылка на тип значения.
//		Значение: значение параметра.
Процедура ОбновитьНастройкиВБазе(ТаблицаНастроекВБазе) Экспорт
	
	Для Каждого СтрокаНастройки Из ТаблицаНастроекВБазе Цикл
		
		НайденныйЭлемент = Справочники.ПредопределенныеНастройки.ПолучитьСсылку(СтрокаНастройки.Идентификатор);
		
		Если НайденныйЭлемент = Справочники.ПредопределенныеНастройки.ПустаяСсылка() Тогда
			НайденныйЭлемент = Справочники.ПредопределенныеНастройки.НайтиПоРеквизиту("ИмяНастройки", СтрокаНастройки.ИмяНастройки);
		КонецЕсли;
		
		Если НайденныйЭлемент <> Справочники.ПредопределенныеНастройки.ПустаяСсылка()
			И БазоваяФункциональность.СсылкаСуществует(НайденныйЭлемент) Тогда
			Элемент = НайденныйЭлемент.ПолучитьОбъект();
		Иначе
			Элемент = Справочники.ПредопределенныеНастройки.СоздатьЭлемент();
			СсылкаНового = Справочники.ПредопределенныеНастройки.ПолучитьСсылку(СтрокаНастройки.Идентификатор);
			Элемент.УстановитьСсылкуНового(СсылкаНового);
		КонецЕсли;
		
		Если ТипЗнч(СтрокаНастройки.Значение) = Тип("Булево") Тогда
			Элемент.ТипЗначения = ПредопределенноеЗначение("Перечисление.ТипыЗначенияПредопределенныхЗначений.Булево");
		ИначеЕсли ТипЗнч(СтрокаНастройки.Значение) = Тип("Строка") Тогда
			Элемент.ТипЗначения = ПредопределенноеЗначение("Перечисление.ТипыЗначенияПредопределенныхЗначений.Строка");			
		КонецЕсли;
		Элемент.ИмяНастройки = СтрокаНастройки.ИмяНастройки;
		Элемент.Наименование = СтрокаНастройки.Наименование;
		Элемент.Значение = СтрокаНастройки.Значение;
		Элемент.Описание = СтрокаНастройки.Описание;

		Элемент.Записать();
		
	КонецЦикла;

КонецПроцедуры

Функция ОтсутствующиеНастройкиВБазе(ТаблицаОписанияПредопределенныхНастроек) Экспорт
	
	ТаблицаНовыхНастроек = ТаблицаПредопределенныхНастроек();
	
	Для Каждого СтрокаНастройки Из ТаблицаОписанияПредопределенныхНастроек Цикл
		
        Элемент = Справочники.ПредопределенныеНастройки.ПолучитьСсылку(СтрокаНастройки.Идентификатор);
        Если Не БазоваяФункциональность.СсылкаСуществует(Элемент) Тогда
        	Элемент = Справочники.ПредопределенныеНастройки.НайтиПоРеквизиту("ИмяНастройки", СтрокаНастройки.ИмяНастройки);
        КонецЕсли;

        Если ЗначениеЗаполнено(Элемент) = Ложь Тогда
        	НоваяНастройка = ТаблицаНовыхНастроек.Добавить();
        	ЗаполнитьЗначенияСвойств(НоваяНастройка, СтрокаНастройки);
        КонецЕсли;
        
	КонецЦикла;
	 
	Возврат ТаблицаНовыхНастроек;
	
КонецФункции

Процедура ИнициализироватьТаблицуПредопределенныхНастроек(ТаблицаОписанияПредопределенныхНастроек) Экспорт
	
	ТаблицаОписанияПредопределенныхНастроек = ТаблицаПредопределенныхНастроек();
	ЗаполнитьТаблицуПредопределенныхНастроек(ТаблицаОписанияПредопределенныхНастроек);
	ПредопределенныеНастройкиПереопределяемый.ПриЗаполненииТаблицыПредопределенныхНастроек(ТаблицаОписанияПредопределенныхНастроек);
	
КонецПроцедуры

Процедура ЗаполнитьТаблицуПредопределенныхНастроек(ТаблицаОписанияПредопределенныхНастроек) Экспорт

	
КонецПроцедуры


// Функция возвращает таблицу значений с предопределенными настройками.
// Таблица содержит следующие колонки:
//		Идентификатор: Строка - уникальный идентификатор настройки.
//		ИмяНастройки: Строка - наименование настройки.
//		Хранилище: ValueStorage - хранилище значений.
//		Содержание: Строка - содержание настройки.
//		Описание - Строка - описание настройки.
//		ТипЗначения: CatalogRef.ПредопределенныеНастройки - ссылка на тип значения.
//		Значение: значение параметра.
//
// Возвращаемое значение:
// ТаблицаЗначений - таблица со следующими колонками:
//		Идентификатор - УникальныйИдентификатор - уникальный идентификатор настройки.
//		ИмяНастройки - Строка - имя настройки.
//		Хранилище - ValueStorage - хранилище значений.
//		Содержание - Строка - содержание настройки.
//		Описание - Строка - описание настройки.
//		ТипЗначения - CatalogRef.ПредопределенныеНастройки - ссылка на тип значения.
//		Значение - значение параметра настройки.
Функция ТаблицаПредопределенныхНастроек() Экспорт

    ТаблицаНастроек = Новый ТаблицаЗначений;
    ТаблицаНастроек.Колонки.Добавить("Идентификатор", Новый ОписаниеТипов("УникальныйИдентификатор"));
    ТаблицаНастроек.Колонки.Добавить("ИмяНастройки", Новый ОписаниеТипов("Строка"));
    ТаблицаНастроек.Колонки.Добавить("Хранилище", Новый ОписаниеТипов("ValueStorage"));
    ТаблицаНастроек.Колонки.Добавить("Наименование", Новый ОписаниеТипов("Строка"));
    ТаблицаНастроек.Колонки.Добавить("Описание", Новый ОписаниеТипов("Строка"));
    ТаблицаНастроек.Колонки.Добавить("ТипЗначения", Новый ОписаниеТипов("CatalogRef.ПредопределенныеНастройки"));
    ТаблицаНастроек.Колонки.Добавить("Значение");
    
    Возврат ТаблицаНастроек;
    
КонецФункции

#КонецОбласти